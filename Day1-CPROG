1.  Given two numbers, Swap those two numbers without using temporary variable
#include <stdio.h>
int main() {
  int a, b;
  printf("Enter a: ");
  scanf("%d", &a);
  printf("Enter b: ");
  scanf("%d", &b);

  a = a - b;   

  b = a + b;

  a = b - a;

  printf("After swapping, a = %d\n", a);
  printf("After swapping, b = %d", b);

  return 0;
}

2. Calculate the number of years,weeks and the remaining days for the given total days
#include <stdio.h>
int main() {
   int days, years, weeks;

   printf("Enter number of days:");
   scanf("%d",&days);

    // Converts days to years, weeks and days
    years = days/365; // Calculate years
    weeks = (days % 365)/7; // Calculate weeks
    days = days - ((years*365) + (weeks*7)); // Calculate remaining  
    
    printf("Years: %d\n", years);
    printf("Weeks: %d\n", weeks);
    printf("Days: %d \n", days);

  return 0;
}

3.Evaluate a polynomial of degree n.
#include <stdio.h>

int main() {
    int n, i;
    double x, result = 0;

    // Input: Enter the degree of the polynomial
    printf("Enter the degree of the polynomial: ");
    scanf("%d", &n);

    // Input: Enter the coefficients
    double coefficients[n + 1];
    printf("Enter the coefficients: ");
    for (i = 0; i <= n; i++) {
        scanf("%lf", &coefficients[i]);
    }

    // Input: Enter the value of x
    printf("Enter the value of x: ");
    scanf("%lf", &x);

    // Evaluate the polynomial using Horner's method
    for (i = n; i >= 0; i--) {
        result = result * x + coefficients[i];
    }

    // Output: P(x)
    printf("P(%lf) = %lf\n", x, result);

    return 0;
}


1.Get three values x, y, z and write a program to print 1 if x is the middle value, 2 if y is the middle value and 3 if z is the 
middle value. Assume that all three variables (x, y, z) are distinct and have different values.

#include <stdio.h>

int main() {
    // Write C code here
    int x, y, z;

    // Input values
    printf("Enter three distinct values (x, y, z): ");
    scanf("%d %d %d", &x, &y, &z);

    // Determine the middle value
    if ((x > y && x < z) || (x < y && x > z))
        printf("%d",1);
    else if ((y > x && y < z) || (y < x && y > z))
        printf("%d",2);
    else
        printf("%d",3);

    return 0;
}

2.A password is said to be strong if it satisfies the following criteria: 
#include <stdio.h>
#include <string.h>

int isLowerCase(char ch) {
    return (ch >= 'a' && ch <= 'z');
}

int isUpperCase(char ch) {
    return (ch >= 'A' && ch <= 'Z');
}

int isDigit(char ch) {
    return (ch >= '0' && ch <= '9');
}

int isSpecialChar(char ch) {
    char specialChars[] = "!@#$%^&*()-+";
    for (int i = 0; i < strlen(specialChars); i++) {
        if (ch == specialChars[i]) {
            return 1; // True, it's a special character
        }
    }
    return 0; // False, it's not a special character
}

int isPasswordStrong(char password[]) {
    int length = strlen(password);
    int hasLowerCase = 0, hasUpperCase = 0, hasDigit = 0, hasSpecialChar = 0;

    if (length < 8) {
        return 0; // Password is not strong (length < 8)
    }

    for (int i = 0; i < length; i++) {
        if (isLowerCase(password[i])) {
            hasLowerCase = 1;
        } else if (isUpperCase(password[i])) {
            hasUpperCase = 1;
        } else if (isDigit(password[i])) {
            hasDigit = 1;
        } else if (isSpecialChar(password[i])) {
            hasSpecialChar = 1;
        }
    }

    return (hasLowerCase && hasUpperCase && hasDigit && hasSpecialChar);
}

int main() {
    char password[50];

    printf("Enter the password: ");
    scanf("%s", password);

    if (isPasswordStrong(password)) {
        printf("Password is strong!\n");
    } else {
        printf("Password is not strong!\n");
    }

    return 0;

3.
A firm creates projects for which a certain number of hours are needed. The firm has a certain number of days. During 10% of the days,
the workers are being trained and cannot work on the project. A normal working day is 8 hours long. The project is important for the firm 
and every worker must work on it with overtime of 2 hours per day. The hours must be rounded down to the nearest integer 
(for example, 6.98 hours are rounded to 6 hours).
Write a program that calculates whether the firm can finish the project on time and how many hours more are needed or left.}

Input:

Accept three integers as input(total number of hours needed,number of days,number of workers).



Output:

If the time is enough,print "Yes!{the hours left} hours left.".
If the time is NOT enough, print "Not enough time!{additional hours} hours needed.

// Online C compiler to run C program online
#include <stdio.h>

int main() {
    // Declare variables
    int totalHoursNeeded, numDays, numWorkers;

    // Input values
    printf("Enter total number of hours needed, number of days, and number of workers: ");
    scanf("%d %d %d", &totalHoursNeeded, &numDays, &numWorkers);

    // Calculate total hours available (considering 10% for training)
    int totalHoursAvailable = (numDays - numDays / 10) * 8;

    // Calculate total hours with overtime
    int totalHoursWithOvertime = totalHoursAvailable + (numDays - numDays / 10) * 2 * numWorkers;

    // Calculate the difference between total hours needed and total hours with overtime
    int hoursDifference = totalHoursNeeded - totalHoursWithOvertime;

    // Output the result
    if (hoursDifference <= 0) {
        printf("Yes! %d hours left.\n", -hoursDifference);
    } else {
        printf("Not enough time! %d hours needed.\n", hoursDifference);
    }

    return 0;
}
